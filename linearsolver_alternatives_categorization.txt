multirhstest

Variation point: Dune::LoopSolver<Vector>
	Dune::LoopSolver<Vector> -- true positive
	Dune::IterativeSolver<X, Y> -- true false positive
	Dune::BiCGSTABSolver<X> --  true positive 
	Dune::CGSolver<X> --  true positive 
	Dune::GeneralizedPCGSolver<X> --  true positive 
 	Dune::GradientSolver<X> --  true positive 
	Dune::MINRESSolver<class X> --  true positive 
	Dune::RestartedGMResSolver<X, Y,Y> --  true positive 
	Dune::InverseOperator<X, Y> -- true false positive

Variation point: Dune::SeqJac<Matrix,Vector,Vector>
	Dune::SeqJac<Matrix,Vector,Vector,l> --  true positive 
	Dune::SeqGS<Matrix,Vector,Vector,l> --  true positive 
	Dune::SeqILU<Matrix,Vector,Vector,l> --  true positive 
	Dune::SeqILU0<Matrix,Vector,Vector,l> --  true positive 
	Dune::SeqILUn<Matrix,Vector,Vector,l> --  true positive 
	Dune::SeqSOR<Matrix,Vector,Vector,l> --  true positive 
	Dune::SeqSSOR<Matrix,Vector,Vector,l> --  true positive 
	Dune::SeqILDL<class M,class X,class Y> -- true positive but not proposed by domain expert
	
	Dune::Amg::TwoLevelMethod<class FO,class CSP,class S> -- generally appicable 
	Dune::BlockPreconditioner<Vector,Vector,??C??,Preconditioner<X,Y>> -- generally appicable 
	Dune::Amg::AMG<??M??,X,??S??,SequentialInformation,std::allocator<X>> -- generally appicable 
	Dune::Amg::FastAMG<class M,class X,SequentialInformation,std::allocator<X>> -- generally appicable 
	Dune::InverseOperator2Preconditioner<class O,-1> -- generally appicable 
	Dune::Amg::KAMG<class M,class X,class S,SequentialInformation,GeneralizedPCGSolver<X>,std::allocator<X>> -- generally appicable 
	Dune::Amg::KAmgTwoGrid<class AMG> -- generally appicable 
	Dune::Richardson<class X,class Y> -- generally appicable 
	Dune::NonoverlappingBlockPreconditioner<??C??,??P??> -- generally appicable 
	Dune::SeqOverlappingSchwarz<??M??,X,AdditiveSchwarzMode,ILU0SubdomainSolver<M,X,X>,std::allocator<X>> -- generally appicable 
	Dune::ParSSOR<Matrix,Vector,Vector,??C??>?? -- generally appicable 
	
	Dune::ILUSubdomainSolver<class M,class X,class Y> -- true false positive
	Dune::PDELab::NonoverlappingJacobi<A,Vector,Vector> -- true false positive
	Dune::Preconditioner<Vector,Vector> -- abstrakte Oberklasse; true false positive	
	Dune::PDELab::NonoverlappingRichardson<class GFS,class X,class Y> -- true false positive
	Dune::PDELab::OverlappingWrappedPreconditioner<class CC,class GFS,class P> -- true false positive
	Dune::PDELab::UMFPackSubdomainSolver<class GFS,class M,class X,class Y> -- true false positive	
	Dune::PDELab::SuperLUSubdomainSolver<class GFS,class M,class X,class Y> -- true false positive	
	Dune::PDELab::OvlpDGAMGPrec<class DGGFS,class DGMatrix,class DGPrec,class DGCC,class CGGFS,class CGPrec,class CGCC,class P,class DGHelper,class Comm> -- true false positive
	Dune::PDELab::RestrictedSuperLUSubdomainSolver<class GFS,class M,class X,class Y> -- true false positive
	Dune::PDELab::SeqDGAMGPrec<class DGMatrix,class DGPrec,class CGPrec,class P> -- true false positive

